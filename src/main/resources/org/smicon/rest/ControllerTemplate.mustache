package {{packageName}};

import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import javax.ejb.Singleton;
import javax.persistence.EntityManagerFactory;
import javax.persistence.PersistenceUnit;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;

import com.fasterxml.jackson.annotation.JsonProperty;

import papu.mvc.Controller;

{{#imports}}
import {{name}};
{{/imports}}

@Singleton
@Path("{{plural}}")
public class {{controllerType}}
extends
Controller<{{modelType}}, {{wrappedIdType}}>
{

	@PersistenceUnit(unitName = "{{persistenceUnitName}}")
	private EntityManagerFactory emf;
	
	@Override
	public Class<{{modelType}}> getModelClass() {
		return {{modelType}}.class;
	}

	@Override
	public EntityManagerFactory getEntityManagerFactory() {
		return emf;
	}

	@GET
	public Object findAll() throws Exception {
		return wrapAll(findAllModels());
	}

	@POST
	@Path("{{{nonGeneratedIdPath}}}")
	public {{modelOuterWrapperType}} create({{{nonGeneratedIdMethodParameters}}}{{#hasNonGenIds}}, {{/hasNonGenIds}}{{modelOuterWrapperType}} {{outerWrapperVariableName}}) throws Exception {
		{{modelType}} {{modelVariableName}} = {{outerWrapperVariableName}}.unwrap();
		{{#simple}}
		{{#nonGeneratedIdProperty}}
		{{modelVariableName}}.{{setterName}}({{idPropertyName}});
		{{/nonGeneratedIdProperty}}
		{{/simple}}
		{{#embedded}}
		{{idType}} {{idName}} = new {{idType}}();
		{{#nonGeneratedIdProperties}}
		{{#setter}}
		{{idName}}.{{setterName}}({{idPropertyName}});
		{{/setter}}
		{{#field}}
		{{idName}}.{{idPropertyName}} = {{idPropertyName}};
		{{/field}}
		{{/nonGeneratedIdProperties}}
		{{modelVariableName}}.{{setterName}}({{idName}});
		{{/embedded}}
		{{#composite}}
		{{#nonGeneratedIdProperties}}
		{{modelVariableName}}.{{setterName}}({{idPropertyName}});
		{{/nonGeneratedIdProperties}}
		{{/composite}}
		
		return wrap(createModel({{modelVariableName}}));
	}

	@GET
	@Path("{{{idPath}}}")
	public {{modelOuterWrapperType}} find({{{idMethodParameters}}}) throws Exception {
		{{#simple}}
		{{#idProperty}}
		return wrap(findModel({{idPropertyName}}));
		{{/idProperty}}
		{{/simple}}
		{{#embedded}}
		{{idType}} {{idName}} = new {{idType}}();
		{{#idProperties}}
		{{#setter}}
		{{idName}}.{{setterName}}({{idPropertyName}});
		{{/setter}}
		{{#field}}
		{{idName}}.{{idPropertyName}} = {{idPropertyName}};
		{{/field}}
		{{/idProperties}}
		return wrap(findModel({{idName}}));
		{{/embedded}}
		{{#composite}}
		{{idType}} {{idName}} = new {{idType}}();
		{{#idProperties}}
		{{#idSetter}}
		{{idName}}.{{setterName}}({{idPropertyName}});
		{{/idSetter}}
		{{#idField}}
		{{idName}}.{{idPropertyName}} = {{idPropertyName}};
		{{/idField}}
		{{/idProperties}}
		return wrap(findModel({{idName}}));
		{{/composite}}
	}

	@PUT
	@Path("{{{idPath}}}")
	public {{modelOuterWrapperType}} update({{{idMethodParameters}}}, {{modelOuterWrapperType}} {{outerWrapperVariableName}}) throws Exception {
		{{modelType}} {{modelVariableName}} = {{outerWrapperVariableName}}.unwrap();
		{{#simple}}
		{{#idProperty}}
		{{modelVariableName}}.{{setterName}}({{idPropertyName}});
		{{/idProperty}}
		{{/simple}}
		{{#embedded}}
		{{idType}} {{idName}} = new {{idType}}();
		{{#idProperties}}
		{{#setter}}
		{{idName}}.{{setterName}}({{idPropertyName}});
		{{/setter}}
		{{#field}}
		{{idName}}.{{idPropertyName}} = {{idPropertyName}};
		{{/field}}
		{{/idProperties}}
		{{modelVariableName}}.{{setterName}}({{idName}});
		{{/embedded}}
		{{#composite}}
		{{#idProperties}}
		{{modelVariableName}}.{{setterName}}({{idPropertyName}});
		{{/idProperties}}
		{{/composite}}

		return wrap(updateModel({{modelVariableName}}));
	}

	@DELETE
	@Path("{{{idPath}}}")
	public {{modelOuterWrapperType}} delete({{{idMethodParameters}}}) throws Exception {
		{{#simple}}
		{{#idProperty}}
		return wrap(deleteModel({{idPropertyName}}));
		{{/idProperty}}
		{{/simple}}
		{{#embedded}}
		{{idType}} {{idName}} = new {{idType}}();
		{{#idProperties}}
		{{#setter}}
		{{idName}}.{{setterName}}({{idPropertyName}});
		{{/setter}}
		{{#field}}
		{{idName}}.{{idPropertyName}} = {{idPropertyName}};
		{{/field}}
		{{/idProperties}}
		return wrap(deleteModel({{idName}}));
		{{/embedded}}
		{{#composite}}
		{{idType}} {{idName}} = new {{idType}}();
		{{#idProperties}}
		{{#idSetter}}
		{{idName}}.{{setterName}}({{idPropertyName}});
		{{/idSetter}}
		{{#idField}}
		{{idName}}.{{idPropertyName}} = {{idPropertyName}};
		{{/idField}}
		{{/idProperties}}
		return wrap(deleteModel({{idName}}));
		{{/composite}}
	}

	public static Object wrapAll(List<{{modelType}}> aList) {
		final ArrayList<{{modelInnerWrapperType}}> allWrapped = new ArrayList();
		for(int i = 0 ; i < aList.size(); i++) allWrapped.add(new {{modelInnerWrapperType}}(aList.get(i))); 
		return new Object(){ @JsonProperty List<{{modelInnerWrapperType}}> {{plural}} = allWrapped; };
	};
	
	public static Object wrapAll(Map<?, {{modelType}}> aMap) {
		final HashMap<Object, {{modelInnerWrapperType}}> allWrapped = new HashMap();
		for(Object key : aMap.keySet()) allWrapped.put(key, new {{modelInnerWrapperType}}(aMap.get(key))); 
		return new Object(){ @JsonProperty Map<Object, {{modelInnerWrapperType}}> {{plural}} = allWrapped; };
	};
	
	public static {{modelOuterWrapperType}} wrap(final {{modelType}} aResult) {
		return new {{modelOuterWrapperType}}(aResult);
	}
	
	static class {{modelOuterWrapperType}} {
		@JsonProperty {{modelInnerWrapperType}} {{singular}};
		
		public {{modelOuterWrapperType}}() { this(new {{modelType}}()); };
		public {{modelOuterWrapperType}}({{modelType}} aWrappable) { {{singular}} = new {{modelInnerWrapperType}}(aWrappable); };
		public {{modelType}} unwrap() { return {{singular}}.unwrap(); }
	}
	
{{#modelWrapper}}
	{{#modelCollectionProperties}}
	// Link routes
	{{#properties}}
	@GET
	@Path("{{{idPath}}}/{{name}}")
	public Object {{getterName}}({{{idMethodParameters}}}) throws Exception {
		return {{controllerType}}.wrapAll(findModel({{idMethodAttributes}}).{{getterName}}());
	}
	
	{{/properties}}
	{{/modelCollectionProperties}}
	public static class {{modelInnerWrapperType}} {
		{{modelType}} {{singular}};
		
		public {{modelInnerWrapperType}}() { this(new {{modelType}}()); }
		public {{modelInnerWrapperType}}({{modelType}} aWrappable) { {{singular}} = aWrappable; }

		public {{modelType}} unwrap() { return {{singular}}; }

		{{#simpleProperties}}
		// Simple properties
		{{#properties}}
		public {{type}} {{getterName}}() { return {{singular}}.{{getterName}}(); }
		public void {{setterName}}({{type}} {{name}}) { {{singular}}.{{setterName}}({{name}}); }
		{{/properties}}
		{{/simpleProperties}}
		{{#modelPropertiesWithSimpleIds}}
		// Model properties with simple id's
		{{#properties}}
		public {{idType}} {{getterName}}() { return {{singular}}.{{getterName}}().{{idGetterName}}(); }
		public void {{setterName}}({{idType}} {{idName}}) {
			{{type}} {{name}} = new {{type}}();
			{{name}}.{{idSetterName}}({{idName}});
			{{singular}}.{{setterName}}({{name}});
		}
		{{/properties}}
		{{/modelPropertiesWithSimpleIds}}
		{{#modelPropertiesWithEmbeddedIds}}
		// Model properties with embedded id's
		{{#properties}}
		public String {{getterName}}() {
			{{idType}} {{idName}} = {{singular}}.{{getterName}}().{{idGetterName}}();
			return {{{idSerialiseLine}}};
		}
		public void {{setterName}}(String {{serialisedId}}) throws Exception {
			String[] parts = {{serialisedId}}.split("{{urlDelimiter}}");
			{{idType}} {{idName}} = new {{idType}}();
			{{#idProperties}}
			{{idName}}.{{propertyName}} = parse(parts[{{index}}], {{propertyType}}.class);
			{{/idProperties}}
			{{type}} {{name}} = new {{type}}();
			{{name}}.{{idSetterName}}({{idName}});
			{{singular}}.{{setterName}}({{name}});
		}
		{{/properties}}
		{{/modelPropertiesWithEmbeddedIds}}
		{{#modelPropertiesWithCompositeIds}}
		// Model properties with composite id's
		{{#properties}}
		public String {{getterName}}() { 
			{{type}} {{name}} = {{singular}}.{{getterName}}();
			return {{{idSerialiseLine}}}; 
		}
		public void {{setterName}}(String {{serialisedId}}) throws Exception {
			String[] parts = {{serialisedId}}.split("{{urlDelimiter}}");
			{{type}} {{name}} = new {{type}}();
			{{#idProperties}}
			{{name}}.{{propertySetterName}}(parse(parts[{{index}}], {{propertyType}}.class));
			{{/idProperties}}
			{{singular}}.{{setterName}}({{name}});
		}
		{{/properties}}
		{{/modelPropertiesWithCompositeIds}}
		{{#modelCollectionProperties}}
		// Model collection properties
		{{#properties}}
		{{#isMap}}
		public void {{setterName}}({{type}}<{{keyType}}, {{modelInnerWrapperType}}> {{wrappedName}}) { 
			{{type}}<{{keyType}}, {{modelType}}> {{name}} = new {{instanceType}}();
			for({{keyType}} _key_ : {{wrappedName}}.keySet()) 
				{{name}}.put(_key_, {{wrappedName}}.get(_key_).unwrap());
			{{singular}}.{{setterName}}({{name}}); 
		}
		{{/isMap}}
		{{^isMap}}
		public void {{setterName}}({{type}}<{{modelInnerWrapperType}}> {{wrappedName}}) { 
			{{type}}<{{modelType}}> {{name}} = new {{instanceType}}();
			for({{modelInnerWrapperType}} {{loopVariable}} : {{wrappedName}}) 
				{{name}}.add({{loopVariable}}.unwrap());
			{{singular}}.{{setterName}}({{name}}); 
		}
		{{/isMap}}
		{{/properties}}
		
		// Links for model collection properties - required by the ember data format
		@JsonProperty Object links = new Object() { 
		{{#properties}}
			@JsonProperty String {{name}} = "{{modelPlural}}";
		{{/properties}}
		};
		{{/modelCollectionProperties}}
	}
{{/modelWrapper}}
}